# Реализовать класс Stationery (канцелярская принадлежность).
# Определить в нем атрибут title (название) и метод draw (отрисовка).
# Метод выводит сообщение “Запуск отрисовки.” Создать три дочерних класса Pen (ручка),
# Pencil (карандаш), Handle (маркер). В каждом из классов реализовать переопределение метода draw.
# Для каждого из классов метод должен выводить уникальное сообщение.
# Создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.


# класс канцелярская принадлежность, имеет атрибут title, и имеет метод draw(просто вывод на экран сообщения)
class Stationery:
    def __init__(self, title):
        self.title = title

    def draw(self):
        print('Запуск отрисовки')
        return


# дочерний класс от класса канцелярской принадлежности, перегружает метод draw
class Pen(Stationery):
    def __init__(self, title):
        super().__init__(title)     # для работы с атрибутами родителя, перечисляем их

    def draw(self):
        return f'{self.title}: Запуск отрисовки ручкой'


# дочерний класс от класса канцелярской принадлежности, перегружает метод draw
class Pencil(Stationery):
    def __init__(self, title):
        super().__init__(title)     # для работы с атрибутами родителя, перечисляем их

    def draw(self):
        return f'{self.title}: Запуск отрисовки карандашом'


# дочерний класс от класса канцелярской принадлежности, перегружает метод draw
class Handle(Stationery):
    def __init__(self, title):
        super().__init__(title)     # для работы с атрибутами родителя, перечисляем их

    def draw(self):
        return f'{self.title}: Запуск отрисовки маркером'


# создаем экземпляры
pen = Pen('ручка')
pencil = Pencil('карандаш')
handle = Handle('маркер')

# вывод на экран
print(pen.draw())
print(pencil.draw())
print(handle.draw())
